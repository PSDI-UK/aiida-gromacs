[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-gromacs"
dynamic = ["version"]  # read from aiida_gromacs/__init__.py
description = "A plugin for using GROMACS with AiiDA for molecular dymanics simulations."
authors = [{name = "James Gebbie-Rayet", email = "james.gebbie@stfc.ac.uk"},
           {name = "Jas Kalayan", email = "jas.kalayan@stfc.ac.uk"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Development Status :: 5 - Production/Stable",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin", "gromacs", "aiida-gromacs"]
requires-python = ">=3.8"
dependencies = [
    "aiida-core>=2.5.0,<3",
    "voluptuous"
]

[project.urls]
Source = "https://github.com/PSDI-UK/aiida-gromacs"

[project.optional-dependencies]
testing = [
    "pgtest==1.3.2",
    "wheel==0.43.0",
    "coverage[toml]",
    "pytest==8.2.2",
    "pytest-cov==5.0.0",
    "pytest-sugar==1.0.0"
]
pre-commit = [
    "pre-commit==3.7.1",
    "pylint==3.2.5"
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
    "sphinxcontrib-contentui",
    "sphinxcontrib-details-directive",
    "sphinx_copybutton",
    "furo",
    "markupsafe<2.1"
]

[project.scripts]
gmx_pdb2gmx = "aiida_gromacs.cli.pdb2gmx:cli"
gmx_editconf = "aiida_gromacs.cli.editconf:cli"
gmx_genion = "aiida_gromacs.cli.genion:cli"
gmx_grompp = "aiida_gromacs.cli.grompp:cli"
gmx_mdrun = "aiida_gromacs.cli.mdrun:cli"
gmx_solvate = "aiida_gromacs.cli.solvate:cli"
gmx_make_ndx = "aiida_gromacs.cli.make_ndx:cli"
genericMD = "aiida_gromacs.cli.genericMD:cli"
createarchive = "aiida_gromacs.cli.createarchive:cli"

[project.entry-points."aiida.data"]
"gromacs.pdb2gmx" = "aiida_gromacs.data.pdb2gmx:Pdb2gmxParameters"
"gromacs.editconf" = "aiida_gromacs.data.editconf:EditconfParameters"
"gromacs.genion" = "aiida_gromacs.data.genion:GenionParameters"
"gromacs.grompp" = "aiida_gromacs.data.grompp:GromppParameters"
"gromacs.mdrun" = "aiida_gromacs.data.mdrun:MdrunParameters"
"gromacs.plumed_input" = "aiida_gromacs.data.plumed_input:PlumedInputData"
"gromacs.solvate" = "aiida_gromacs.data.solvate:SolvateParameters"
"gromacs.make_ndx" = "aiida_gromacs.data.make_ndx:Make_ndxParameters"

[project.entry-points."aiida.calculations"]
"gromacs.pdb2gmx" = "aiida_gromacs.calculations.pdb2gmx:Pdb2gmxCalculation"
"gromacs.editconf" = "aiida_gromacs.calculations.editconf:EditconfCalculation"
"gromacs.genion" = "aiida_gromacs.calculations.genion:GenionCalculation"
"gromacs.grompp" = "aiida_gromacs.calculations.grompp:GromppCalculation"
"gromacs.mdrun" = "aiida_gromacs.calculations.mdrun:MdrunCalculation"
"gromacs.solvate" = "aiida_gromacs.calculations.solvate:SolvateCalculation"
"gromacs.make_ndx" = "aiida_gromacs.calculations.make_ndx:Make_ndxCalculation"
"gromacs.genericMD" = "aiida_gromacs.calculations.genericMD:GenericCalculation"

[project.entry-points."aiida.parsers"]
"gromacs.pdb2gmx" = "aiida_gromacs.parsers.pdb2gmx:Pdb2gmxParser"
"gromacs.editconf" = "aiida_gromacs.parsers.editconf:EditconfParser"
"gromacs.genion" = "aiida_gromacs.parsers.genion:GenionParser"
"gromacs.grompp" = "aiida_gromacs.parsers.grompp:GromppParser"
"gromacs.mdrun" = "aiida_gromacs.parsers.mdrun:MdrunParser"
"gromacs.solvate" = "aiida_gromacs.parsers.solvate:SolvateParser"
"gromacs.make_ndx" = "aiida_gromacs.parsers.make_ndx:Make_ndxParser"
"gromacs.genericMD" = "aiida_gromacs.parsers.genericMD:GenericParser"

[project.entry-points."aiida.workflows"]
"gromacs.setup" = "aiida_gromacs.workflows.simsetup:SetupWorkChain"

[project.entry-points."aiida.cmdline.data"]
"provenance" = "aiida_gromacs.commands.provenance:provenance"

[tool.flit.module]
name = "aiida_gromacs"

[tool.pylint.format]
max-line-length = 125

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
]

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
filterwarnings = [
    "ignore:Creating AiiDA configuration folder:",
    'ignore:Object of type .* not in session, .* operation along .* will not proceed:sqlalchemy.exc.SAWarning',
    "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_gromacs"]

[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
line_length = 120
force_sort_within_sections = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'AIIDA', 'FIRSTPARTY', 'LOCALFOLDER']
known_aiida = ['aiida']
extend_skip = [".tpr", ".gro", ".pdb", ".top", ".mdp"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38
[testenv]
usedevelop=True
[testenv:py{38,39,310,311}]
description = Run the test suite against a python version
extras = testing
commands = pytest {posargs}
[testenv:pre-commit]
description = Run the pre-commit checks
extras = pre-commit
commands = pre-commit run {posargs}
[testenv:docs]
description = Build the documentation
extras = docs
commands = sphinx-build -nW --keep-going -b html {posargs} docs/source docs/build/html
commands_post = echo "open file://{toxinidir}/docs/build/html/index.html"
"""
